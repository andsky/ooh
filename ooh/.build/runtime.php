<?php 
 class Application { private $locale = ''; public function __construct() { } public static function init() { $GLOBALS['_startTime'] = microtime(TRUE); set_error_handler(array(Error::instance(), 'Error')); set_exception_handler(array(Error::instance(), 'Exception')); date_default_timezone_set("Asia/Shanghai"); } public static function loadControl($control) { $load_class = APP_PATH.'controllers/'.$control.'.php'; if (is_file($load_class)){ require($load_class); $control .= 'Controller'; return new $control(); }else{ throw new HttpExceptions("can't find controller '{$control}'", 404); } } public static function cli($cli='') { if (!empty($cli)) { $tmp = explode('.', $cli); define('CONTROL', $tmp[0]); define('ACTION', $tmp[1]); } self::init(); try { $control = CONTROL.'Controller'; $obj = new $control(); $obj->exec(); } catch (Exception $e) { return Error::instance()->Exception($e); } } public static function run() { self::init(); define('CONTROL', Router::instance()->get_control()); define('ACTION', Router::instance()->get_action()); try { self::loadControl(CONTROL)->exec(); } catch (Exception $e) { return Error::instance()->Exception($e); } } }
 class Base{ private static $_instance; private static $_plugins = array(); private static $_models = array(); public static function instance() { if (self::$_instance == null) { self::$_instance = new self; } return self::$_instance; } public static function model($model) { if (!empty(self::$_models[$model])) { return self::$_models[$model]; } $model_class = BASE_PATH.APP_MODEL.DIRECTORY_SEPARATOR.'models'.DIRECTORY_SEPARATOR.$model.'.php'; if ( is_file( $model_class ) ) { require($model_class); }else{ throw new Http503Exceptions("can't load model {$model},Please check!!"); } self::$_models[$model] = new $model(); return self::$_models[$model]; } public static function plugin($plugin) { if(isset(self::$_plugins[$plugin])) { return self::$_plugins[$plugin]; } $class_file = ''; foreach (array(PLU_PATH, APP_PLU_PATH) as $path) { $class_file = $path.$plugin.'.php'; if (file_exists($class_file)) { break; } } if ( empty($class_file)) { throw new HttpExceptions('not fount plugin: '.$plugin); } require($class_file); if (class_exists($plugin)) { self::$_plugins[$plugin] = new $plugin(); return self::$_plugins[$plugin]; }else { self::$_plugins[$plugin] = TRUE; return TRUE; } } }
 class Config { private static $_config = array(); private static $_instance = null; private $config_name = '.config'; public static function instance() { if (self::$_instance == null) { self::$_instance = new self; } return self::$_instance; } public function __construct() { } private function load() { if ( !empty(self::$_config) ) { return FALSE; } $config_file = BUILD_PATH.$this->config_name.'.php'; if (is_file( APP_BUILD_PATH.$this->config_name.'.php' )) { $config_file = APP_BUILD_PATH.$this->config_name.'.php'; } self::$_config = require( $config_file ); } public function &__get($name) { $this->load(); if (isset(self::$_config[$name])) { return self::$_config[$name]; } return self::$_config[$name]; } public function __isset($name) { return isset(self::$_config[$name]); } public function __set($name, $value) { self::$_config[$name] = $value; } }
 abstract class Controller { public $view; public $tpl = ''; private $_prefix_action = ''; public final function __construct() { $this->_init(); $this->_before(); } public final function __destruct() { $this->_after(); } public function _init() { if (!isset(Config::instance()->app['action_prefix'])) { $this->set_action_prefix(Config::instance()->app['action_prefix']); } $this->view = View::instance(); if (is_file( APP_PATH.'function/function.php' )){ include( APP_PATH.'function/function.php' ); } } public function exec() { $action = $this->action(ACTION); if (!method_exists($this, $action)) { throw new HttpExceptions('can\'t find action '.ACTION.' in controller '.CONTROL, 404); } empty($this->tpl) && $this->tpl = CONTROL.DIRECTORY_SEPARATOR.ACTION; $ret = $this->$action(); $GLOBALS['_endTime'] = microtime(TRUE); $this->view->put($ret); $this->view->put(get_object_vars($this)); $this->view->display($this->tpl); } protected function action($action) { return $this->_prefix_action . $action; } protected function set_action_prefix($pre) { $this->_prefix_action = $pre; } public function __get($name) { return Base::instance()->model($name); } public function __set($name, $value) { $this->$name = $value; } public function _before() { if (method_exists($this, 'before')){ $this->before(); } } public function _after() { if (method_exists($this, 'after')){ $this->after(); } } }
 class Db { private static $_instance; public $master_dbh; public $slave_dbh; public $conn_id; public $queryid; public $querys; public $sqls = array(); public $transTimes = 0; public static function instance() { if (self::$_instance == null) { $driver = &Config::instance()->db['driver']; self::$_instance = new $driver; } return self::$_instance; } function __construct() { } public function connect() { if ( $this->conn_id ) { return true; } $this->_connect(Config::instance()->db); } public function reset_content() { $ping = @mysql_ping($this->conn_id); if ( !$ping ){ $this->connect(); } } public function init_master() { if ( $this->master_dbh ) { return true; } } public function init_slave() { if ( $this->master_dbh ) { return true; } } public function switch_connect($is_write) { if ($is_write) { return $this->init_master(); }else { return $this->init_slave(); } } public function version() { $sql = $this->_version(); $query = $this->query($sql); return $query->fetch_one('ver'); } public function query($sql, $unbuffered = false) { $this->connect(); $this->sqls[] = $sql; $this->queryid = $this->_query($sql); if (!$this->queryid) { throw new Http500Exceptions('SQL query exception (code: [' . $this->_error_number() . ']; sql: [' . $sql . ']; message:' . $this->_error_message(), 400); } $this->querys++; return $this; } public function fetch_array($type = 'assoc') { $rs = $this->{'_fetch_'.$type}(); return $rs; } public function fetch_one($n = 0, $type = 'assoc') { $array = $this->_fetch_one($type); if (empty($array)) { return FALSE; } if ( is_numeric( $n ) ) { return $array; } return $array[$n]; } public function insert($table, $data) { $fields = array(); $values = array(); foreach($data as $key => $val) { $fields[] = '`'.$key.'`'; $values[] = $this->escape($val); } return $this->_insert($table, $fields, $values); } public function inserts($table, $data) { $fields = array(); $values = array(); foreach ($data as $line => $row) { foreach($row as $key => $val) { $fields[$key] = '`'.$key.'`'; $values[$line][] = $this->escape($val); } } return $this->_inserts($table, $fields, $values); } public function replace($table, $data) { $fields = array(); $values = array(); foreach($data as $key => $val) { $fields[] = '`'.$key.'`'; $values[] = $this->escape($val); } return $this->_replace($table, $fields, $values); } public function update($table, $data, $where) { $fields = array(); foreach($data as $key => $val) { $fields[] = '`'.$key."` = ".$this->escape($val); } return $this->_update($table, $fields, $where); } public function increment($table, $data, $where) { $fields = array(); foreach($data as $key => $val) { $fields[] = '`'.$key.'` = `'.$key.'`+'.$this->escape($val); } return $this->_update($table, $fields, $where); } public function delete($table, $where) { return $this->_delete($table, $where); } public function limit($limit, $offset) { return $this->_limit($limit, $offset); } public function table($name) { return $this->_table($name); } public function num_rows() { return $this->_num_rows(); } public function affected_rows() { return $this->_affected_rows(); } public function insert_id() { return $this->_insert_id(); } public function free_result($queryid) { return $this->_free_result($this->queryID); } public function is_write($sql) { if ( ! preg_match('/^\s*"?(SET|INSERT|UPDATE|DELETE|REPLACE|CREATE|DROP|LOAD DATA|COPY|ALTER|GRANT|REVOKE|LOCK|UNLOCK)\s+/i', $sql)) { return false; } return true; } function _parse($str) { $str = trim($str); if ( ! preg_match("/(\s|<|>|!|=|is null|is not null)/i", $str)) { return false; } return true; } public function escape($str) { switch (gettype($str)) { case 'string' : $str = "'".$this->escape_str($str)."'"; break; case 'boolean' : $str = ($str === FALSE) ? 0 : 1; break; default : $str = ($str === NULL) ? "''" : "'".$str."'"; break; } return $str; } public function list_tables() { $sql = $this->_list_tables(); $rs = array(); $query = $this->query($sql); if ($query->num_rows() > 0) { foreach($query->fetch_array() as $row) { if (isset($row['TABLE_NAME'])) { $rs[] = $row['TABLE_NAME']; } else { $rs[] = array_shift($row); } } } return $rs; } public function list_fields($table = '') { if ($table == '') { return false; } $sql = $this->_list_columns($table); $query = $this->query($sql); $rs = array(); foreach($query->fetch_array() as $row) { if( strtolower($row['Extra']) == 'auto_increment' ){ continue; } if (isset($row['COLUMN_NAME'])) { $rs[] = $row['COLUMN_NAME']; } else { $rs[] = $row; } } return $rs; } public function field_exists($field_name, $table) { return ( ! in_array($field_name, $this->list_fields($table))) ? false : true; } public function truncate($table) { $sql = $this->_truncate($table); return $this->query($sql); } public function startTrans() { if ($this->transTimes == 0) { $sql = $this->_startTrans(); $this->query($sql); } $this->transTimes++; return ; } public function commit() { if ($this->transTimes > 0) { $sql = $this->_commit(); $this->query($sql); $this->transTimes = 0; } return true; } public function rollback() { if ($this->transTimes > 0) { $sql = $this->_rollback(); $this->query($sql); $this->transTimes = 0; } return true; } public function close() { if (is_resource($this->conn_id) OR is_object($this->conn_id)) { $this->_close($this->conn_id); } $this->conn_id = false; } }
 class Error { private static $_instance; private static $_errorLevel = array(); function __construct() { } public static function instance() { if (self::$_instance == null) { self::$_instance = new self; } return self::$_instance; } function Exception($exception) { $traceline = "#%s %s(%s): %s(%s)"; $log = "OOH PHP Fatal error:  Uncaught exception '%s' with message '%s' in %s:%s\nStack trace:\n%s\n"; $html = "OOH PHP Fatal error:  Uncaught exception '%s' with message '%s' in %s:%s<br />Stack trace:\n%s"; $trace = $exception->getTrace(); foreach ($trace as $key => $stackPoint) { $trace[$key]['args'] = array_map('gettype', $trace[$key]['args']); } $result = array(); foreach ($trace as $key => $stackPoint) { $result[] = sprintf( $traceline, $key, $stackPoint['file'], $stackPoint['line'], $stackPoint['function'], implode(', ', $stackPoint['args']) ); } $result[] = '#' . ++$key . ' {main}'; $data = array(); $data['type'] = get_class($exception); $data['message'] = $exception->getMessage(); $data['code'] = ($exception instanceof HttpExceptions) ? $exception->httpCode : 503; $data['file'] = $exception->getFile(); $data['line'] = $exception->getLine(); $data['trace'] = implode("<br />", $result); Response::instance()->sendStatus($data['code']); if (Config::instance()->error['display']) { if (isset(Config::instance()->error['exception_tpl'])) { include Config::instance()->error['exception_tpl']; }else{ include SYS_PATH.'/config/exception.default.php.tpl'; } }else { if (isset(Config::instance()->error['error_tpl'])) { include Config::instance()->error['error_tpl']; }else{ include SYS_PATH.'/config/error.default.php.tpl'; } } if (Config::instance()->error['log']) { $time=date('Y-m-d H:i:s'); $log_path = Config::instance()->error['path']; Fso::instance()->mkdir($log_path); $log_path = $log_path . DIRECTORY_SEPARATOR. date("Y-m-d").'.log'; $data['trace'] = implode("\n", $result); $msg = sprintf($log, $data['type'], $data['message'], $data['file'], $data['line'], $data['trace']); error_log($msg, 3, $log_path); } } function Error($errno, $errstr, $errfile, $errline) { if (self::$_errorLevel == NULL) { self::$_errorLevel = $this->errorLevels(Config::instance()->error['level']); } if (!in_array($errno, self::$_errorLevel)) { return true; } switch ($errno) { case E_NOTICE: case E_USER_NOTICE: $errors = "Notice"; break; case E_WARNING: case E_USER_WARNING: $errors = "Warning"; break; case E_ERROR: case E_USER_ERROR: $errors = "Fatal Error"; break; default: $errors = "Unknown"; break; } if (Config::instance()->error['display']) { printf ("<br />\n<b>%s</b>: %s in <b>%s</b> on line <b>%d</b><br /><br />\n", $errors, $errstr, basename($errfile), $errline); } if (Config::instance()->error['log']) { $time=date('Y-m-d H:i:s'); $log_path = Config::instance()->error['path']; Fso::instance()->mkdir($log_path); $log_path = $log_path . DIRECTORY_SEPARATOR. date("Y-m-d").'.log'; error_log(sprintf("%s %s:  %s in %s on line %d \n", $time, $errors, $errstr, $errfile, $errline), 3, $log_path); } return true; } private function errorLevels($level) { $level_names = array( E_ERROR => "E_ERROR", E_WARNING => "E_WARNING", E_PARSE => "E_PARSE", E_NOTICE => "E_NOTICE", E_CORE_ERROR => "E_CORE_ERROR", E_CORE_WARNING => "E_CORE_WARNING", E_COMPILE_ERROR => "E_COMPILE_ERROR", E_COMPILE_WARNING => "E_COMPILE_WARNING", E_USER_ERROR => "E_USER_ERROR", E_USER_WARNING => "E_USER_WARNING", E_USER_NOTICE => "E_USER_NOTICE" ); if(defined("E_STRICT")) { $level_names[E_STRICT] = "E_STRICT"; } if(defined("E_RECOVERABLE_ERROR")) { $level_names[E_RECOVERABLE_ERROR] = "E_RECOVERABLE_ERROR"; } $levels = array(); if(($level & E_ALL) == E_ALL) { $levels[] = E_ALL; $level &= ~E_ALL; } foreach($level_names as $key => $name) { if(($level & $key) == $key) { $levels[] = $key; } } return $levels; } }
 class Exceptions extends Exception{ function __construct( $message, $code = 0, $extra = false ){ parent::__construct($message, $code); } function __destruct(){ } } class HttpExceptions extends Exceptions{ public $httpCode; function __construct( $message, $code = 0, $extra = false ){ $this->httpCode = $code; parent::__construct($message, $code); } } class Http500Exceptions extends HttpExceptions{ function __construct( $message ){ parent::__construct($message, 500); } } class Http503Exceptions extends HttpExceptions{ function __construct( $message ){ parent::__construct($message, 503); } } class Http404Exceptions extends HttpExceptions{ function __construct( $message ){ parent::__construct($message, 404); } } class Http403Exceptions extends HttpExceptions{ function __construct( $message ){ parent::__construct($message, 403); } }
 class Model{ public static $db = null; private static $_instance; protected $_select = array(); protected $_join = array(); protected $_from = array(); protected $_distinct = false; protected $_index = ''; protected $_where = array(); protected $_like = array(); protected $_instr = array(); protected $_offset = ''; protected $_limit = ''; protected $_group = array(); protected $_order = array(); protected $_having = array(); protected $_autoData = array(); protected $_tablePrefix = ''; protected $_fields = array(); function __construct() { if( self::$db == null ){ self::$db = Db::instance(); } $this->getTableInfo(); } public static function instance() { if (self::$_instance == null) { self::$_instance = new self; } return self::$_instance; } public function dbprefix($table = '') { if ($table == '') { throw new Http503Exceptions('table is null'); } return $this->_tablePrefix.$table; } public function getTableInfo() { if ( !empty( $this->_fields ) || empty( $this->_tableName ) ){ return ; } $file = TMP_PATH . 'table' . DIRECTORY_SEPARATOR .$this->_tableName.'.php'; if ( file_exists( $file ) ){ $this->_fields = json_decode(file_get_contents($file),true); }else{ if ( !is_dir(TMP_PATH . 'table') ){ @mkdir(TMP_PATH . 'table', 0777, true); } $rs = self::$db->list_fields($this->_tableName); foreach($rs as $k=>$v){ $this->_fields[$v['Field']] = strstr($v['Type'],'int') ? (int)$v['Default'] : $v['Default']; } file_put_contents($file, json_encode($this->_fields)); } } public function select($field = '*') { if ( !is_array( $field ) ) { $field = explode(',', $field); } foreach ( $field as $v ) { if ( !strpos($v, '.') && count( $field ) > 1 ) { $val = $this->_tableName.'.'.$v; }else { $val = $v; } $this->_select[] = $val; } return $this; } public function index($index) { $this->_index = $index; return $this; } public function max($field, $alias = 'max') { $alias = ($alias != '') ? $alias : $field; $sql = 'MAX('.$field.') AS '.$alias; $this->_select[] = $sql; return $this; } public function min($field, $alias = 'min') { $alias = ($alias != '') ? $alias : $field; $sql = 'MIN('.$field.') AS '.$alias; $this->_select[] = $sql; return $this; } public function avg($field, $alias = 'avg') { $alias = ($alias != '') ? $alias : $field; $sql = 'AVG('.$field.') AS '.$alias; $this->_select[] = $sql; return $this; } public function sum($field,$alias = 'sum') { $alias = ($alias != '') ? $alias : $field; $sql = 'SUM('.$field.') AS '.$alias; $this->_select[] = $sql; return $this; } public function count($field = '*', $alias = 'count') { $alias = ($alias != '') ? $alias : $field; $sql = 'COUNT('.$field.') AS '.$alias; $this->_select[] = $sql; return $this; } public function join($table, $type = 'LEFT') { $type = strtoupper($type); foreach ( $table as $k => $v ) { $ar = explode( '=', $v ); if ( !strstr('.',$ar[0]) ) { $ar[0] = $k.'.'.$ar[0]; } if ( !strstr('.',$ar[1]) ) { $ar[1] = $this->_tableName.'.'.$ar[1]; } $this->_join[] = $type.' JOIN '.$this->dbprefix($k).' ON '.$ar[0].' = '.$ar[1]; } return $this; } public function distinct($val = true) { $this->_distinct = (is_bool($val)) ? $val : true; return $this; } public function notin($where, $type = 'AND') { return $this->in($where,true,$type); } public function in($where, $not = false, $type = 'AND') { foreach ( $where as $k => $v ) { $prefix = (count($this->_where) == 0) ? '' : $type.' '; $not = ($not) ? ' NOT' : ''; $arr = array(); if ( is_array($v) ){ $values = $v; }else{ $values = explode( ',', $v ); } foreach ( $values as $value ) { $arr[] = self::$db->escape($value); } $this->_where[] = $prefix . $k . $not . ' IN (' . implode(', ', $arr) . ') '; } return $this; } public function orwhere($where) { return $this->where($where,'OR'); } public function where(array $where, $type = 'AND', $type2 = '') { foreach ( $where as $k => $v ) { $prefix = (count($this->_where) == 0) ? '' : $type.' '; if ( !self::$db->_parse($k) && is_null($v) ) { $k .= ' IS NULL'; } if ( !self::$db->_parse($k)) { $k .= ' ='; } if ( !is_null($v) ) { $v = self::$db->escape($v); } if ( !empty($type2) ){ $_where[] = $k.' '.$v; }else{ $this->_where[] = $prefix.$k.' '.$v; } } if ( !empty($type2) && !empty($_where)){ $this->_where[] = $prefix .'('. implode(" $type2 ", $_where) . ') '; } return $this; } public function orlike($where, $not = false, $like = 'all') { return $this->like($where,$not,'OR',$like); } public function like(array $where, $not = false, $type = 'AND', $like = 'all') { foreach ( $where as $k => $v ) { $prefix = (count($this->_like) == 0) ? '' : $type.' '; $not = ($not) ? ' NOT' : ''; $arr = array(); $v = str_replace("+", " ", $v); $values = explode( ' ', $v ); foreach ( $values as $value ) { if ( $like == 'left' ) { $keyword = "'%{$value}'"; }else if ( $like == 'right' ) { $keyword = "'{$value}%'"; }else { $keyword = "'%{$value}%'"; } $arr[] = $k . $not.' LIKE '.$keyword; } $this->_like[] = $prefix .'('. implode(' OR ', $arr) . ') '; } return $this; } public function orinstr($where) { return $this->instr($where,'OR'); } public function instr($where, $type = 'AND') { foreach ( $where as $k => $v ) { $prefix = (count($this->_instr) == 0) ? '' : $type.' '; $arr = array(); $v = str_replace('+', ' ', $v); $values = explode( ' ', $v ); foreach ( $values as $value ) { $arr[] = 'INSTR('.$k.', '.self::$db->escape($value).')'; } $this->_instr[] = $prefix .'('. implode(' OR ', $arr) . ') '; } return $this; } public function group($by) { if (is_string($by)) { $by = explode(',', $by); } foreach ( $by as $v ) { $this->_group[] = $v; } return $this; } public function having($by, $type = 'AND') { foreach ( $by as $k => $v ) { $prefix = (count($this->_having) == 0) ? '' : $type.' '; if ( !self::$db->_parse($k)) { $k .= ' ='; } if ( !is_null($v) ) { $v = self::$db->escape($v); } $this->_where[] = $prefix.$k.' '.$v; } return $this; } public function by($by, $direction = 'desc') { $direction = strtoupper($direction); if ( $direction == 'RAND' ) { $direction = 'RAND()'; } $this->_order[] = $by.' '.$direction; return $this; } public function limit($value, $offset = '') { if ( is_object( $value ) ) { $offset = $value->offset(); $value = $value->size(); } $this->_limit = $value; if ($offset != '') $this->_offset = $offset; return $this; } public function offset($value) { $this->_offset = $value; return $this; } public function pk($id, $fetch = FALSE) { $where = array( $this->_PK => $id ); if (is_array($id) || strpos($id, ',')) { $this->in($where); }else{ $this->where($where); } if ($fetch) { return $this->_compile_select()->fetch_one(); } return $this; } public function pk_union($id, $fetch = FALSE) { $pk = explode(',', $this->_PK); if (!is_array($id)) { $id = explode(',', $id); } foreach ($pk as $key => $value) { $this->where(array($value => $id[$key])); } if ($fetch) { return $this->_compile_select()->fetch_one(); } return $this; } public function _compile_select($auto = true) { $sql = ( !$this->_distinct) ? 'SELECT ' : 'SELECT DISTINCT '; $sql .= (count($this->_select) == 0) ? '*' : implode(', ', $this->_select); $sql .= ' FROM '; $sql .= self::$db->table($this->_tableName); $sql .= ' '; if ( !empty($this->_index) ){ $sql .= 'FORCE INDEX('.$this->_index.') '; } if (count($this->_join) > 0) { $sql .= implode(' ', $this->_join); $sql .= ' '; } if (count($this->_where) > 0 OR count($this->_like) > 0 OR count($this->_instr) > 0) { $sql .= 'WHERE '; } $sql .= implode(' ', $this->_where); if (count($this->_like) > 0) { if (count($this->_where) > 0) { $sql .= ' AND '; } $sql .= implode(' ', $this->_like); } if (count($this->_instr) > 0) { if (count($this->_where) > 0 OR count($this->_like) > 0) { $sql .= ' AND '; } $sql .= implode(' ', $this->_instr); } if (count($this->_group) > 0) { $sql .= ' GROUP BY '; $sql .= implode(', ', $this->_group); } if (count($this->_having) > 0) { $sql .= ' HAVING '; $sql .= implode(', ', $this->_having); } if (count($this->_order) > 0) { $sql .= ' ORDER BY '; $sql .= implode(', ', $this->_order); } if (is_numeric($this->_limit)) { $sql .= self::$db->limit($this->_limit, $this->_offset); } $this->_reset_select(); if ( $auto ) { return self::$db->query($sql); } return $sql; } public function from($table) { $this->_tableName = $table; return $this; } public function insert($data) { $sql = self::$db->insert($this->_tableName, array_merge($data, $this->_autoData )); $this->_reset_write(); return self::$db->query($sql)->affected_rows(); } public function insertid($data) { $sql = self::$db->insert($this->_tableName, array_merge($data, $this->_autoData )); $this->_reset_write(); return self::$db->query($sql)->insert_id(); } public function inserts($data) { $sql = self::$db->inserts($this->_tableName, $data); return self::$db->query($sql)->affected_rows(); } public function insert_filter($data) { $sql = self::$db->insert($this->_tableName, array_merge(array_intersect_key($data, $this->_fields), $this->_autoData )); $this->_reset_write(); return self::$db->query($sql)->insert_id(); } public function replace($data) { $sql = self::$db->replace($this->_tableName, array_merge( $data,$this->_autoData )); $this->_reset_write(); return self::$db->query($sql)->affected_rows(); } public function update($data) { $sql = self::$db->update($this->_tableName, $data, $this->_where); $this->_reset_write(); return self::$db->query($sql)->affected_rows(); } public function increment($data) { $sql = self::$db->increment($this->_tableName, $data, $this->_where); $this->_reset_write(); return self::$db->query($sql)->affected_rows(); } public function delete() { $sql = self::$db->delete($this->_tableName, $this->_where); $this->_reset_write(); return self::$db->query($sql)->affected_rows(); } public function __call($name, $arguments) { $object = $this->_compile_select(); return call_user_func_array(array($object, $name), $arguments); } public function _reset_run($vars) { foreach ($vars as $item => $default_value) { $this->$item = $default_value; } } public function _reset_select() { $vars = array( '_select' => array(), '_index' => false, '_join' => array(), '_where' => array(), '_like' => array(), '_instr' => array(), '_group' => array(), '_having' => array(), '_order' => array(), '_distinct' => false, '_limit' => false, '_offset' => false, ); $this->_reset_run($vars); } public function _reset_write() { $this->_where = array(); $this->_autoData = array(); } public function key($keyword, $id) { if ( !is_array($id) ){ return $this->_tableName.'_'.$keyword.'_'.$id; }else{ $tmp = array(); foreach($id as $k=>$v){ $tmp[] = $this->_tableName.'_'.$keyword.'_'.$v; } return $tmp; } } public function startTrans() { $this->commit(); self::$db->startTrans(); return; } public function commit() { return self::$db->commit(); } public function rollback() { return self::$db->rollback(); } }
 class Router { private static $_instance; private $_action = ''; private $_control =''; public function __construct() { if (!in_array(Request::instance()->method(), array('GET', 'POST', 'PUT', 'DELETE'))) { throw new HttpExceptions('HTTP Method not supported.', 405); return; } $this->set_control_action(Config::instance()->router['control_action']); $this->init(Config::instance()->router['route']); } public function __destruct() { } public static function instance() { if (self::$_instance == null) { self::$_instance = new self; } return self::$_instance; } public function init($type) { switch ($type) { case 'regex': $this->regex(); break; default: $this->get(); break; } return ; } private function get() { $this->set_control_action(Request::instance()->get('act')); } private function pathinfo() { $this->default_controller(); if ( preg_match("/^\/(\w+)/", $path_info, $match) ) { if($match[1]) $this->action = $match[1]; }; if ( preg_match("/^\/(\w+)\/(\w+)/", $path_info, $match) ) { if($match[1]) $this->action = $match[1]; if($match[2]) $this->method = $match[2]; $res = preg_replace('@(\w+)\/([^,\/]+)@e', 'Request::instance()->set(\'\\1\',"\\2");', str_replace($match[0],'',$path_info)); } } private function regex() { $alias = $params = NULL; $alias = $this->_get_path_info(); if (strstr($alias, '/')) { list($alias, $params) = explode('/', $this->_get_path_info(), 2); } if (empty($alias)) { return FALSE; } if (empty(Config::instance()->router['urls'][$alias])) { throw new Http404Exceptions('not fount'); } $this->set_control_action(Config::instance()->router['urls'][$alias]['act']); if (empty($params) || empty(Config::instance()->router['urls'][$alias]['params'])) { return FALSE; } if (is_array(Config::instance()->router['urls'][$alias]['params'])) { foreach (Config::instance()->router['urls'][$alias]['params'] as $regex_act =>$regex_params) { if (preg_match('#^'.$regex_params.'/?$#', $params, $matches)) { if ( strstr('.',$regex_act) ){ $this->set_control_action($regex_act); } Request::instance()->sets($matches); return FALSE; } } }else if (preg_match('#^'.Config::instance()->router['urls'][$alias]['params'].'/?$#', $params, $matches)) { Request::instance()->sets($matches); return FALSE; } } private function _get_path_info() { $path_info = $_SERVER[Config::instance()->router['protocol']]; if (empty($path_info)) { return NULL; } if (strstr( $path_info, '/favicon.ico' )){ Response::instance()->sendStatus(404); exit; } if (!empty(Config::instance()->router['ext'])){ $path_info = str_replace(Config::instance()->router['ext'],'', $path_info); } if ( strstr($path_info, '?') ){ $pu = parse_url($path_info); $path_info = $pu['path']; parse_str($pu['query'], $output); Request::instance()->sets($output); } return ltrim($path_info, '/'); } public function get_action() { return $this->_action; } public function get_control() { return $this->_control; } public function set_action($action) { if ( !empty($action) ){ $this->_action = $action; } } public function set_control($control) { if ( !empty($control) ){ $this->_control = $control; } } public function set_control_action($data = '') { if (empty($data)) { return ; } if (!preg_match('/^[0-9a-zA-Z_\.]+$/', $data)) { throw new Http500Exceptions('The server is busy, please try again later.'); } if (strstr($data, '.')) { list($control, $action) = explode('.', $data); $this->set_control($control); $this->set_action($action); }else{ $this->set_action($data); } } }
 class View{ private static $_instance; protected $caching_id = null; private $_out_put = 'html'; private $_out_charset = 'utf-8'; private static $_engin = null; private $_display_data = array(); public function __construct() { } public static function instance() { if (self::$_instance == null) { self::$_instance = new self; } return self::$_instance; } private function init() { if (self::$_engin != null) { return self::$_engin; } $c = &Config::instance()->view; $this->_out_put = $c['output']; self::$_engin= Base::instance()->plugin($c['driver']); $vars = get_object_vars(self::$_engin); foreach ( $vars as $k => $v ) { if ( !empty( $c[$k] ) ) { self::$_engin->$k = $c[$k]; } } if ( isset( $c['cache_time'] ) ) { self::$_engin->cache_lifetime = $c['cache_time']; } return self::$_engin; } public function __get($name) { if ($name == '_view') { return $this->init(); } } public function __set($name, $value) { if ($name == '_view') { return $this->init()->$name = $value; } } public function assign($name, $value) { $this->_view->assign($name, $value); } public function output($type='html') { $this->_out_put = $type; } public function display_json($data) { header("Content-type: application/json"); echo json_encode($data); exit; } public function display_xml($data) { header("Content-type: text/xml; charset=utf-8"); echo $data; exit; } public function display_html($data) { header("Content-type: text/html; charset=utf-8"); echo $data; exit; } public function display($tpl = '') { $this->set('_totalTime',number_format( ( $GLOBALS['_endTime'] - $GLOBALS['_startTime'] ), 3)); $tpl = $this->tpl($tpl); $display_fun = 'display_'.$this->_out_put; if ( is_file( Config::instance()->view['template_dir'].'/'.$tpl ) ) { foreach ($this->_display_data as $key => $value) { $this->assign($key, $value); } $results = $this->_view->fetch($tpl,$this->caching_id); $this->$display_fun($results); } $this->$display_fun($this->_display_data); } public function fetch($tpl = '', $cache_id = null) { $tpl = $this->tpl($tpl); return $this->_view->fetch($tpl, $cache_id); } public function isCache($caching_id, $tpl = '') { $this->caching_id = $caching_id; $tpl = $this->tpl($tpl); $this->_view->caching = 2; if ($this->_view->is_cached($tpl,$caching_id)){ $this->_view->display($tpl,$caching_id); exit; } } public function regFun(array $fun) { foreach ( $fun as $v ) { $this->_view->register_function($v,$v); } } private function tpl($tpl = '') { return $tpl.Config::instance()->view['ext']; } public function set($name, $value) { $this->_display_data[$name] = $value; } public function put($data) { if ( !is_array( $data ) ) { return false; } $this->_display_data += $data; } }
 class Auth{ private static $_instance; private $session_name = 'user'; private $login_url = 'user'; private function __construct () { } public static function instance() { if (self::$_instance == null) { self::$_instance = new self; } return self::$_instance; } public function set(array $array) { if ( !empty( $array ) ) { foreach ( $array as $k => $v ) { $this->$k = $v; } } return $this; } public function checkLogin() { if ( !empty(Session::instance()->{$this->session_name})){ return TRUE; } return FALSE; } public function checkState() { if (!$this->checkLogin()) { $uri = Request::instance()->uri(); if (strstr($uri, '?')) { $uri .= '&'.time(); }else { $uri .= '?'.time(); } if (strstr($this->login_url, '?')) { $login_url = $this->login_url.'&redirect='.urlencode($uri); }else { $login_url = $this->login_url.'?redirect='.urlencode($uri); } Response::instance()->nocache(); echo "<script language='javascript' type='text/javascript'>"; echo "window.location.href='$login_url'"; echo "</script>"; exit; } return TRUE; } public function checkAllow($priv_field = 'priv_id', $group_field = 'group_id') { $priv_id = Base::instance()->model('priv')->get_id(CONTROL, ACTION); if (empty($priv_id)) { return TRUE; } if ($this->checkState()) { $user_priv = $group_priv = array(); $user_info = Session::instance()->{$this->session_name}; if (!empty($user_info['priv_id'])) { $user_priv = $user_info['priv_id']; } if (!empty($user_info['group_id'])) { $group_priv = Base::instance()->model('group')->get($user_info['group_id']); } if (!is_array($group_priv['priv_id'])) { $group_priv['priv_id'] = array(); } $priv = array_merge($user_priv, $group_priv['priv_id']); $priv = array_unique($priv); foreach ($priv as $value) { if ($value == $priv_id) { return TRUE; } } } JS::alert('deadend','back'); } }
 class Cache { private static $_instance; protected $_exp = 3600; public static function instance($driver = NULL) { if (self::$_instance == null) { if (empty($driver)){ $driver = Config::instance()->cache['driver']; } self::$_instance = new $driver; } return self::$_instance; } public function __construct() { $this->_exp = Config::instance()->cache['exp']; $this->_init(); } public function __destruct() { } public function exp($exp) { $this->_exp = $exp; return self::$_instance; } public function __get($key) { return $this->_get($key); } public function __set($key, $data) { return $this->_set($key, $data); } public function __unset($key) { return $this->_del($key); } public function get($key) { return $this->_get($key); } public function set($key, $data) { return $this->_set($key, $data); } public function del($key) { return $this->_del($key); } public function encode($data) { return json_encode($data); } public function decode($data) { return json_decode($data, true); } } class file_cache extends Cache { protected function _init() { } protected function _get($key) { $filename = $this->_get_filename($key); if ( !file_exists( $filename ) ) { return false; } if( $this->_exp > 0 ){ if( time() - filemtime($filename) > $this->_exp ){ return false; } } $content = Fso::instance()->read($filename); return $this->decode( $content ); } protected function _set($key,$data) { $filename = $this->_get_filename($key); return Fso::instance()->write($filename,$this->encode($data)); } protected function _del($key) { return @unlink( $this->_get_filename($key) ); } private function _get_filename($key) { $hash = md5( trim($key) ); $cache_dir = TMP_PATH .'cache/'.substr($hash, 0, 1) . '/' . substr($hash, 1, 1) . '/'; Fso::instance()->mkdir($cache_dir); $filename = $cache_dir.$hash.'.php'; return $filename; } } class memcache_cache extends Cache { private $_mc = null; protected function _init() { if ( $this->_mc == null ) { $this->_mc = new Memcache; list($server,$port) = explode(':', Config::instance()->cache['server']); if ( !$this->_mc->pconnect($server,$port) ) { throw new Http503Exceptions('Can\'t connect to cache memcache server '); } } return true; } protected function _get($key) { $content = $this->_mc->get($key); if ( !$content ){ return false; } return $this->decode( $content ); } protected function _set($key,$data) { $data = $this->encode($data); return $this->_mc->set($key, $data, false, $this->_exp); } protected function _del($key) { if ( !$key ){ return false; } return $this->_mc->delete($key); } } class redis_cache extends Cache { private $_redis = null; protected function _init() { if ( $this->_redis == null ) { $this->_redis = new Redis(); list($server,$port) = explode(':', Config::instance()->cache['server']); if ( !$this->_redis->pconnect($server, $port, Config::instance()->cache['timeout']) ) { throw new Http503Exceptions('Can\'t connect to cache Redis server '); } } return true; } protected function _get($key) { $data = $this->_redis->get($key); if (ctype_digit($data)) { $data = (int)$data; return $data; } if ( $data == FALSE ){ return FALSE; } return $this->decode( $data ); } protected function _set($key, $data) { if (!is_int($data)) { $data = $this->encode($data); } if ($this->_exp == 0) { return $this->_redis->set($key, $data); } return $this->_redis->set($key, $this->_exp, $data); } protected function _del($key) { if ( !$key ){ return FALSE; } return $this->_redis->delete($key); } } class baememcache_cache extends Cache { private $_mc = null; protected function _init() { if ( $this->_mc == null ) { $this->_mc = new BaeMemcache(); if (Config::instance()->cache['server']) { $this->_mc->set_shareAppid(Config::instance()->cache['server']); } } return true; } protected function _get($key) { $content = $this->_mc->get($key); if ( !$content ){ return false; } return $this->decode( $content ); } protected function _set($key,$data) { $data = $this->encode($data); return $this->_mc->set($key, $data, false, $this->_exp); } protected function _del($key) { if ( !$key ){ return false; } return $this->_mc->delete($key); } } 
 class Fso { private static $_instance; function __construct () { } public static function instance() { if (self::$_instance == null) { self::$_instance = new self; } return self::$_instance; } public function isDir($dir) { return is_dir($dir); } public function isFile($file) { return is_file($file); } public function exists($file) { return file_exists($file); } function copyfile($source, $dest) { return @copy($source, $dest); } public function setpath($path) { $path = preg_replace("/[\\/\\\\]+/", DIRECTORY_SEPARATOR, $path); if (function_exists('realpath') AND @realpath($path) !== false) { $path = realpath($path).DIRECTORY_SEPARATOR; } $path = preg_replace("/[\\/\\\\]+/", DIRECTORY_SEPARATOR, $path); return $path; } public function fileList($path,$subdir=false,$_ext=null) { $path = $this->setpath($path); if (!$this->isDir($path)){ return null; } if ( $_ext == null ){ $files = scandir($path); }else{ $files = glob($path.$_ext, GLOB_BRACE); } $list = array(); $found= array(); foreach ($files as $file) { $file = basename($file); if ($file != "." && $file != "..") { $setpath = $path.$file; array_push($list, $setpath); $found[] = $setpath; if ( $subdir && self::isdir($setpath) ) { $subdirfiles = $this->fileList($setpath,$subdir,$_ext); foreach ($subdirfiles as $subdirfile) { array_push($list, $subdirfile); } } } } if ($_ext != null && $subdir) { $files = scandir($path); foreach ($files as $file) { $file = basename($file); if ( $file != "." && $file != ".." ) { $setpath = $path.$file; if (!in_array($setpath, $found) ) { if ($subdir && $this->isDir($setpath)) { $subdirfiles = $this->fileList($setpath,$subdir,$_ext); foreach ($subdirfiles as $subdirfile) { array_push($list, $subdirfile); } } } } } } return $list; } public function mkdir($dir, $mode = 0777) { if (!$this->exists($dir)) { return mkdir($dir, $mode, true); } } public function read($file) { if ( !$this->exists($file) ){ return false; } if (function_exists('file_get_contents')) { return file_get_contents($file); }else { if (!$fp = @fopen($file, 'rb')){ return false; } flock($fp, LOCK_SH); $data = @fread($fp, filesize($file)); flock($fp, LOCK_UN); fclose($fp); return $data; } } public function write($file, $data, $mode = "w+") { if ( ! $fp = @fopen($file, $mode)){ return false; } flock($fp, LOCK_EX); fwrite($fp, $data); flock($fp, LOCK_UN); fclose($fp); return true; } public function append($file,$data) { return $this->write($file,$data,"a+"); } public function delete($file) { if ($this->isFile($file)){ return @unlink( $file ); }elseif ($this->isDir($file)){ $files = $this->fileList($file); foreach ( $files as $vv ) { $this->delete($file); } return @rmdir($file); } return false; } function __destruct () { } }
 class Ftp { private static $_instance; private $host = ''; private $username = ''; private $password = ''; private $port = 21; public $passive = TRUE; private $timeout = 90; private $_stream; function __construct () { } public static function instance() { if (self::$_instance == null) { self::$_instance = new self; } return self::$_instance; } function __destruct () { $this->close(); } public function set($var) { foreach ( $var as $k => $v ) { if ( isset( $this->$k ) ) { $this->$k = $v; } } return $this; } public function connect() { if(!$this->_stream = ftp_connect($this->host, $this->port, $this->timeout)) { throw new Exceptions("Failed to connect to {$this->host}"); } if(!ftp_login($this->_stream, $this->username, $this->password)) { throw new Exceptions("Failed to connect to {$this->host} (login failed)"); } if ($this->passive) { ftp_pasv($this->_stream, (bool)$this->passive); } $this->system_type = ftp_systype($this->_stream); return $this; } public function close() { if($this->_stream) { ftp_close($this->_stream); $this->_stream = false; } } public function get($remote_file = null, $local_file = null, $mode = FTP_ASCII) { if(ftp_get($this->_stream, $local_file, $remote_file, $mode)) { return true; } else { return false; } } public function put($local_file = null, $remote_file = null, $mode = FTP_ASCII) { if(ftp_put($this->_stream, $remote_file, $local_file, $mode)) { return true; } else { return false; } } public function rename($old_name = null, $new_name = null) { if(ftp_rename($this->_stream, $old_name, $new_name)) { return true; } else { return false; } } public function delete($remote_file = null) { if(ftp_delete($this->_stream, $remote_file)) { return true; } else { return false; } } public function cd($directory = null) { if(ftp_chdir($this->_stream, $directory)) { return true; } else { return false; } } public function pwd() { return ftp_pwd($this->_stream); } public function ls($directory = null) { $list = array(); if($list = ftp_nlist($this->_stream, $directory)) { return $list; } else { return array(); } } public function mkdir($directory = null) { if(@ftp_mkdir($this->_stream, $directory)) { return true; } else { return false; } } public function rmdir($directory = null) { if(@ftp_rmdir($this->_stream, $directory)) { return true; } else { return false; } } public function chmod($remote_file, $mode=0755) { if (ftp_chmod($this->_stream, $mode, $remote_file)) { return true; }else { return false; } } }
 class JS { static public function back($step = -1) { $js = 'history.go('.$step.');'; JS::_write($js); } static public function alert($msg, $url = '') { $js = 'alert(\''.$msg.'\');'; if (!empty($url)) { if ($url == 'back') { $js .= 'history.go(-1);'; }else { $js .= 'window.location.href="'.$url.'";'; } } JS::_write($js); } static public function _write($js) { header("Content-type: text/html; charset=utf-8"); echo '<script language="javascript">'; echo $js; echo '</script>'; exit; } static public function reload() { $js = 'location.reload();'; JS::_write($js); } static public function reloadOpener() { $js = 'if (opener)opener.location.reload();'; JS::_write($js); } static public function go($url) { $js = 'if(self!=top)
			  {
				  parent.location.href="'.$url.'";
		      }
			  else
			  {
			 	 window.location.href="'.$url.'";
			  }'; JS::_write($js); } static function msg($msg='', $url='', $fun='') { $alert = ''; if ( $msg ){ $alert .= "parent.Msg.alert('{$msg}', '{$url}');"; } if ( $url ){ } if ( $fun ){ $alert .= "parent.".$fun."();"; } JS::_write($alert); } private function _top($parent) { $js = 'if(self!=top)
			  {
				  parent.'.$parent.';
		      }
			  else
			  {
			 	 '.$parent.';
			  }'; return $js; } static public function close() { $js = 'window.close()'; JS::_write($js); } static public function submit($form) { $js = $form.'.submit();'; JS::_write($js); } static public function valid($field) { $js = 'if(self!=top)
			  {
				  parent.Valid.display("'.$field.'");
		      }
			  else
			  {
			 	 Valid.display("'.$field.'");
			  }'; JS::_write($js); } }
 class Mysql extends Db { protected function _connect($conf) { $this->conn_id = ($conf['pconnect'] == false) ? $this->db_connect($conf) : $this->db_pconnect($conf); if ( !$this->conn_id ) { throw new Http503Exceptions('Can not connect to MySQL server:'.$conf['host']); } if ( !$this->db_set_charset($conf['charset']) ) { throw new Http503Exceptions('Unable to set database connection charset:'.$conf['charset']); } if ( !$this->db_select(Config::instance()->db['dbname']) ) { throw new Http503Exceptions('Cannot use database:'.$conf['dbname']); } } protected function db_connect($conf) { return mysql_connect($conf['host'], $conf['username'], $conf['password'], true); } protected function db_pconnect($conf) { return mysql_pconnect($conf['host'], $conf['username'], $conf['password']); } protected function db_select($dbname) { return mysql_select_db($dbname, $this->conn_id); } protected function db_set_charset($charset) { return mysql_query("SET character_set_connection=".$charset.", character_set_results=".$charset.", character_set_client=".$charset."", $this->conn_id); } protected function _version() { return "SELECT version() AS ver"; } protected function _query($sql) { return mysql_query($sql, $this->conn_id); } protected function escape_str($str) { if (is_array($str)) { foreach($str as $key => $val) { $str[$key] = $this->escape_str($val); } return $str; } if (function_exists('mysql_real_escape_string') AND is_resource($this->conn_id)) { return mysql_real_escape_string($str, $this->conn_id); } elseif (function_exists('mysql_escape_string')) { return mysql_escape_string($str); } else { return addslashes($str); } } protected function _fetch_array($type) { if ($this->queryid === false or $this->num_rows() == 0) { return array(); } $rs = array(); $this->_data_seek(0); while ($row = $this->_fetch_assoc()) { $rs[] = $row; } return $rs; } protected function _fetch_one($type) { if ($this->queryid === false or $this->num_rows() == 0) { return array(); } $rs = array(); $this->_data_seek(0); $rs = $type == 'assoc' ? mysql_fetch_assoc($this->queryid) : mysql_fetch_object($this->queryid); return $rs; } protected function _num_rows() { return mysql_num_rows($this->queryid); } protected function _affected_rows() { if (!$this->queryid) { return FALSE; } return mysql_affected_rows($this->conn_id); } protected function _insert_id() { if (!$this->queryid) { return FALSE; } return mysql_insert_id($this->conn_id); } protected function _fetch_assoc() { if ($this->queryid === false or $this->num_rows() == 0) { return array(); } $rs = array(); $this->_data_seek(0); while ($row = mysql_fetch_assoc($this->queryid)) { $rs[] = $row; } $this->_free_result(); return $rs; } protected function _fetch_object() { if ($this->queryid === false or $this->num_rows() == 0) { return array(); } $rs = array(); $this->_data_seek(0); while ($row = mysql_fetch_object($this->queryid)) { $rs[] = $row; } $this->_free_result(); return $rs; } protected function _data_seek($n = 0) { return mysql_data_seek($this->queryid, $n); } protected function _insert($table, $keys, $values) { return 'INSERT INTO '.$this->_table($table).' ('.implode(', ', $keys).') VALUES ('.implode(', ', $values).')'; } protected function _inserts($table, $keys, $values) { foreach ($values as $v) { $tmp[] = '('.implode(', ', $v).')'; } return 'INSERT INTO '.$this->_table($table).' ('.implode(', ', $keys).') VALUES '.implode(', ', $tmp); } protected function _replace($table, $keys, $values) { return 'REPLACE INTO '.$this->_table($table).' ('.implode(', ', $keys).') VALUES ('.implode(', ', $values).')'; } protected function _update($table, $values, $where) { return 'UPDATE '.$this->_table($table).' SET '.implode(', ',$values).' WHERE '.implode(" ", $where); } protected function _delete($table, $where) { return 'DELETE FROM  '.$this->_table($table).' WHERE '.implode(" ", $where); } protected function _limit($limit, $offset) { if ($offset == 0) { $offset = ''; } else { $offset .= ', '; } return ' LIMIT '.$offset.$limit; } protected function _list_tables() { $sql = 'SHOW TABLES FROM `'.$this->dbname.'`'; return $sql; } protected function _list_columns($table = '') { return 'SHOW COLUMNS FROM '.$this->_table($table); } protected function _truncate($table) { return 'TRUNCATE '.$this->_table($table); } protected function _table($table) { if (stristr($table, '.') === FALSE) { return '`' .$table. '`'; } return $table; } protected function _error_message() { return mysql_error($this->conn_id); } protected function _error_number() { return mysql_errno($this->conn_id); } protected function _free_result() { return mysql_free_result($this->queryid); } protected function _startTrans() { return 'START TRANSACTION'; } protected function _commit() { return 'COMMIT'; } protected function _rollback() { return 'ROLLBACK'; } protected function _close($conn_id) { return mysql_close($conn_id); } }
 class Pager { private static $_instance; public $keyword = 'page'; public $first_page = '首页'; public $last_page = '尾页'; public $pre_page = '上一页'; public $next_page = '下一页'; public $base_link = ''; public $page_num; public $size; public $total; public $style = ''; public $ajax = ''; public static function instance($driver = NULL) { if (self::$_instance == null) { if (empty($driver)) { $driver = Config::instance()->pager['driver']; } self::$_instance = new $driver; } return self::$_instance; } function __construct() { } function __destruct() { } public function set($var) { $vars = get_object_vars($this); foreach ( $vars as $k => $v ) { if ( !empty( $var[$k] ) ) { if ( is_array( $var[$k] ) ) { $this->$k = $var[$k]['count']; }else if ( is_object( $var[$k] ) ) { $info = $var[$k]->count()->fetch_one(); $this->$k = $info['count']; }else { $this->$k = $var[$k]; } } } $this->page_num = $this->_page_num(); return $this; } public function current() { $page = intval(Request::instance()->get($this->keyword)); if ($page <= 1) { $page = 1; } return min($page, $this->page_num); } public function pre() { $current = $this->current(); return $current < $this->page_num ? ($current - 1) : $this->page_num; } public function next() { $current = $this->current(); return $current < $this->page_num ? ($current + 1) : $this->page_num; } function offset() { $offset = $this->size * ($this->current() - 1); if ($offset < 0) { $offset = 0; } return $offset; } function size() { return $this->size; } public function get_page_num() { return $this->page_num; } public function _page_num() { return ceil($this->total/$this->size); } public function url($page) { if (empty($this->base_link)) { $this->base_link = preg_replace('/(\?|&)page=\d+/', '', $_SERVER['REQUEST_URI']); } if (stristr($this->base_link, $this->keyword)) { return $this->base_link.$page; } return $this->base_link.((strpos($this->base_link,'?')===FALSE)?'?':'&').$this->keyword.'='.$page; } public function get_link($page, $location='') { if($this->ajax){ return 'javascript:'.$this->ajax."('".$this->url('')."'+".$page.");"; }else if ( $location ) { return "window.location='".$this->url('')."'+".$page.";return false;"; }else{ return $this->url($page); } } } class pager_pager extends Pager { function __toString() { $page = array(); $page["begin"] = "<form action=\"\" onsubmit=\"".$this->get_link('this.pageno.value','win')."\">"; $page["input"] = "输入页数 <input size=\"3\" type=\"text\" size=\"2\" name=\"pageno\" onblur=\"".$this->get_link('this.value','win')."\"/>  "; $page["no"] = "第 ".$this->current()." 页, 共 {$this->page_num} 页 |  "; $page["first"] = ($this->page_num > 1) ? "<a href=\"".$this->get_link(1)."\" target=\"_self\">首页</a>  ":"首页  "; $page["pre"] = ($this->current() > 1)?"| <a href=\"" . $this->get_link($this->current() - 1) . "\" target=\"_self\">上一页</a> ":"| 上一页 "; $page["next"] = ($this->current() <= $this->page_num - 1)?"| <a href=\"" . $this->get_link($this->current() + 1) . "\" target=\"_self\">下一页</a> ":"| 下一页 "; $page["last"] = ($this->page_num > 1)?"| <a href=\"".$this->get_link($this->page_num)."\" target=\"_self\">尾页</a>":"| 尾页"; $page["end"] = "</form>"; $string = implode("", $page); return $string; } }
 class Request { private static $_instance; private static $_request; private static $_magic; function __construct () { self::$_magic = $this->magic(); self::$_request = array_map(array($this,'strip'), array_merge($_GET, $_POST)); } function __destruct () { } public static function instance() { if (self::$_instance == null) { self::$_instance = new self; } return self::$_instance; } public function __get($name) { return isset(self::$_request[$name]) ? self::$_request[$name] : NULL; } public function __set($name, $value) { self::$_request[$name] = $this->strip($value); } public function __isset($name) { return isset(self::$_request[$name]); } public function params() { return self::$_request; } public function sets($params) { foreach ($params as $name => $value) { $this->$name = $value; } } public function post($name, $default = NULL) { return isset(self::$_request[$name]) ? self::$_request[$name] : $default; } public function get($name, $default = NULL) { return isset(self::$_request[$name]) ? self::$_request[$name] : $default; } public function magic() { return get_magic_quotes_gpc(); } public function strip($values) { if (self::$_magic) { $values = is_array($values) ? array_map(array($this, 'strip'), $values) : stripslashes($values); } return $values; } public function _stripslashes($values) { stripslashes($values); } public function cmd() { if (!isset($_SERVER['argv'])) { return $this; } $argv = $_SERVER['argv']; if (!empty($argv)) { unset($argv[0]); foreach ($argv as $option) { if (strstr($option, '=')) { list($name, $value) = explode('=', $option, 2); $this->$name = $value; } } } return $this; } public function gets() { return self::$_request; } public function posts() { return self::$_request; } public function method() { return $this->server('REQUEST_METHOD'); } function isCli() { return !isset($_SERVER['SERVER_NAME']) && !isset($_SERVER['SERVER_ADDR']); } function isGet() { return $this->method() == 'GET'; } function isPost() { return $this->method() == 'POST'; } function isPut() { return $this->method() == 'PUT'; } function isAjax() { return $this->server('HTTP_X_REQUESTED_WITH') == 'XMLHttpRequest'; } function isFlash() { return $this->server('HTTP_USER_AGENT') == 'Shockwave Flash'; } public function script() { if (isset($_SERVER['SCRIPT_NAME'])) { return $_SERVER['SCRIPT_NAME']; } if (isset($_SERVER['PHP_SELF'])) { return $_SERVER['PHP_SELF']; } return null; } public function uri() { $host = $_SERVER['HTTP_HOST']; if(isset($_SERVER['HTTP_X_REWRITE_URL'])) { $request_uri = $_SERVER['HTTP_X_REWRITE_URL']; } else { $request_uri = $_SERVER['REQUEST_URI']; } return "http://$host".$request_uri; } function server($args) { return isset($_SERVER[$args]) ? $_SERVER[$args] : NULL; } public function getIP() { if (getenv("HTTP_CLIENT_IP") && strcasecmp(getenv("HTTP_CLIENT_IP"), "unknown")) { $ip = getenv("HTTP_CLIENT_IP"); } elseif (getenv("HTTP_X_FORWARDED_FOR") && strcasecmp(getenv("HTTP_X_FORWARDED_FOR"), "unknown")) { $ip = getenv("HTTP_X_FORWARDED_FOR"); } elseif (getenv("REMOTE_ADDR") && strcasecmp(getenv("REMOTE_ADDR"), "unknown")) { $ip = getenv("REMOTE_ADDR"); } elseif (isset($_SERVER['REMOTE_ADDR']) && $_SERVER['REMOTE_ADDR'] && strcasecmp($_SERVER['REMOTE_ADDR'], "unknown")) { $ip = $_SERVER['REMOTE_ADDR']; } else { $ip = "unknown"; } return $ip; } public function getOS () { $agent = $_SERVER["HTTP_USER_AGENT"]; $os = false; if (preg_match("/win/i", $agent) && strpos($agent, "95")) { $os = "Windows 95"; } else if (preg_match("/win 9x/i", $agent) && strpos($agent, "4.90")) { $os = "Windows ME"; } else if (preg_match("/win/i", $agent) && preg_match("/98/", $agent)) { $os = "Windows 98"; } else if (preg_match("/win/i", $agent) && preg_match("/nt 5.1/i", $agent)) { $os = "Windows XP"; } else if (preg_match("/win/i", $agent) && preg_match("/nt 5/i", $agent)) { $os = "Windows 2000"; } else if (preg_match("/win/i", $agent) && preg_match("/nt/i", $agent)) { $os = "Windows NT"; } else if (preg_match("/win/i", $agent) && preg_match("/32/", $agent)) { $os = "Windows 32"; } else if (preg_match("/linux/i", $agent)) { $os = "Linux"; } else if (preg_match("/unix/i", $agent)) { $os = "Unix"; } else if (preg_match("/sun/i", $agent) && preg_match("/os/i", $agent)) { $os = "SunOS"; } else if (preg_match("/ibm/i", $agent) && preg_match("/os/i", $agent)) { $os = "IBM OS/2"; } else if (preg_match("/Mac/i", $agent) && preg_match("/PC/i", $agent)) { $os = "Macintosh"; } else if (preg_match("/PowerPC/i", $agent)) { $os = "PowerPC"; } else if (preg_match("/AIX/i", $agent)) { $os = "AIX"; } else if (preg_match("/HPUX/i", $agent)) { $os = "HPUX"; } else if (preg_match("/NetBSD/i", $agent)) { $os = "NetBSD"; } else if (preg_match("/BSD/i", $agent)) { $os = "BSD"; } else if (preg_match("/OSF1/i", $agent)) { $os = "OSF1"; } else if (preg_match("/IRIX/i", $agent)) { $os = "IRIX"; } else if (preg_match("/FreeBSD/i", $agent)) { $os = "FreeBSD"; } else if (preg_match("/teleport/i", $agent)) { $os = "teleport"; } else if (preg_match("/flashget/i", $agent)) { $os = "flashget"; } else if (preg_match("/webzip/i", $agent)) { $os = "webzip"; } else if (preg_match("/offline/i", $agent)) { $os = "offline"; } else { $os = "Unknown"; } return $os; } public function getBrowser() { $Agent = $_SERVER["HTTP_USER_AGENT"]; $browser = ""; $browserver = ""; $Browsers = array("Lynx", "MOSAIC", "AOL", "Opera", "JAVA", "MacWeb", "WebExplorer", "OmniWeb"); for ($i = 0; $i <= 7; $i ++) { if(strpos($Agent, $Browsers[$i])) { $browser = $Browsers[$i]; } } if (preg_match("/Mozilla/", $Agent)) { if (preg_match("/MSIE/", $Agent)) { preg_match("/MSIE (.*);/U",$Agent,$args); $browserver = $args[1]; $browser = "Internet Explorer"; } else if (preg_match("/Opera/", $Agent)) { $temp = explode(")", $Agent); $browserver = $temp[1]; $temp = explode(" ", $browserver); $browserver = $temp[2]; $browser = "Opera"; } else { $temp = explode("/", $Agent); $browserver = $temp[1]; $temp = explode(" ", $browserver); $browserver = $temp[0]; $browser = "Netscape Navigator"; } } if($browser != "") { $browseinfo = $browser . " " . $browserver; } else { $browseinfo = false; } return $browseinfo; } public function parseSignature($uname = null) { $sysmap = array ( "HP-UX" => "hpux", "IRIX64" => "irix", ); $cpumap = array ( "i586" => "i386", "i686" => "i386", "ppc" => "powerpc", ); if ($uname === null) { $uname = php_uname(); } $parts = split("[[:space:]]+", trim($uname)); $n = count($parts); $release = $machine = $cpu = ''; $sysname = $parts[0]; $nodename = $parts[1]; $cpu = $parts[$n-1]; $extra = ""; if ($cpu == "unknown") { $cpu = $parts[$n-2]; } switch ($sysname) { case "AIX": $release = "{$parts[3]}.{$parts[2]}"; break; case "Windows": switch ($parts[1]) { case "95/98": $release = "9x"; break; default: $release = $parts[1]; break; } $cpu = "i386"; break; case "Linux": $extra = $this->_detectGlibcVersion(); $release = ereg_replace("^([[:digit:]]+\.[[:digit:]]+).*", "\\1", $parts[2]); break; case "Mac" : $sysname = "darwin"; $nodename = $parts[2]; $release = $parts[3]; if ($cpu == "Macintosh") { if ($parts[$n - 2] == "Power") { $cpu = "powerpc"; } } break; case "Darwin" : if ($cpu == "Macintosh") { if ($parts[$n - 2] == "Power") { $cpu = "powerpc"; } } $release = ereg_replace("^([[:digit:]]+\.[[:digit:]]+).*", "\\1", $parts[2]); break; default: $release = ereg_replace("-.*", "", $parts[2]); break; } if (isset($sysmap[$sysname])) { $sysname = $sysmap[$sysname]; } else { $sysname = strtolower($sysname); } if (isset($cpumap[$cpu])) { $cpu = $cpumap[$cpu]; } return array($sysname, $release, $cpu, $extra, $nodename); } }
 class Response { private static $_instance; protected static $http_status = array( 100 => "HTTP/1.1 100 Continue", 101 => "HTTP/1.1 101 Switching Protocols", 200 => "HTTP/1.1 200 OK", 201 => "HTTP/1.1 201 Created", 202 => "HTTP/1.1 202 Accepted", 203 => "HTTP/1.1 203 Non-Authoritative Information", 204 => "HTTP/1.1 204 No Content", 205 => "HTTP/1.1 205 Reset Content", 206 => "HTTP/1.1 206 Partial Content", 300 => "HTTP/1.1 300 Multiple Choices", 301 => "HTTP/1.1 301 Moved Permanently", 302 => "HTTP/1.1 302 Found", 303 => "HTTP/1.1 303 See Other", 304 => "HTTP/1.1 304 Not Modified", 305 => "HTTP/1.1 305 Use Proxy", 307 => "HTTP/1.1 307 Temporary Redirect", 400 => "HTTP/1.1 400 Bad Request", 401 => "HTTP/1.1 401 Unauthorized", 402 => "HTTP/1.1 402 Payment Required", 403 => "HTTP/1.1 403 Forbidden", 404 => "HTTP/1.1 404 Not Found", 405 => "HTTP/1.1 405 Method Not Allowed", 406 => "HTTP/1.1 406 Not Acceptable", 407 => "HTTP/1.1 407 Proxy Authentication Required", 408 => "HTTP/1.1 408 Request Time-out", 409 => "HTTP/1.1 409 Conflict", 410 => "HTTP/1.1 410 Gone", 411 => "HTTP/1.1 411 Length Required", 412 => "HTTP/1.1 412 Precondition Failed", 413 => "HTTP/1.1 413 Request Entity Too Large", 414 => "HTTP/1.1 414 Request-URI Too Large", 415 => "HTTP/1.1 415 Unsupported Media Type", 416 => "HTTP/1.1 416 Requested range not satisfiable", 417 => "HTTP/1.1 417 Expectation Failed", 500 => "HTTP/1.1 500 Internal Server Error", 501 => "HTTP/1.1 501 Not Implemented", 502 => "HTTP/1.1 502 Bad Gateway", 503 => "HTTP/1.1 503 Service Unavailable", 504 => "HTTP/1.1 504 Gateway Time-out" ); private function __construct() { } public static function instance() { if (self::$_instance == null) { self::$_instance = new self; } return self::$_instance; } public function isSend() { return headers_sent(); } public function sendStatus($code = 200) { if (!$this->isSend()) { header(self::$http_status[$code]); } } public function redirect($url) { $this->nocache(); $this->sendStatus(301); header('Location: ' . $url); exit; } public function nocache() { header( 'Expires: Sat, 26 Jul 1997 05:00:00 GMT' ); header( 'Last-Modified: ' . gmdate( 'D, d M Y H:i:s' ) . ' GMT' ); header( 'Cache-Control: no-store, no-cache, must-revalidate' ); header( 'Cache-Control: post-check=0, pre-check=0', false ); header( 'Pragma: no-cache' ); } }
 class Session { private static $_instance; protected $_sess_data = array(); protected $_sess_id; protected $_sess_expire = 7200; public static function instance() { if (self::$_instance == null) { $driver = Config::instance()->session['driver']; self::$_instance = new $driver; } return self::$_instance; } public function __construct() { $this->_sess_expire = Config::instance()->session['expire']; $this->_sess_id = empty($_COOKIE[Config::instance()->session['name']]) ? $this->gen_sid() : $_COOKIE[Config::instance()->session['name']]; setcookie(Config::instance()->session['name'], $this->_sess_id, time() + 31622400, Config::instance()->cookie['path'], Config::instance()->cookie['domain']); register_shutdown_function(array(&$this, '__write')); $this->init(); } public function __destruct() { } private function gen_sid() { return md5(uniqid(microtime() . Request::instance()->getIP(), true)); } private function init() { $this->_init(); $this->__read(); } private function __read() { $data = $this->_read(); if (!$data) { $this->_sess_data = array(); } $this->_sess_data = $data; } public function __write() { $this->_write(); } public function __get($key) { return isset($this->_sess_data[$key]) ? $this->_sess_data[$key] : NULL; } public function __set($key, $value) { return $this->_sess_data[$key] = $value; } public function __isset($key) { return isset($this->_sess_data[$key]); } public function __unset($key) { unset($this->_sess_data[$key]); } public function get($key) { return $this->_sess_data[$key]; } public function set($key, $value) { return $this->_sess_data[$key] = $value; } public function del($key) { unset($this->_sess_data[$key]); return true; } public function flash($key) { $value = $this->_sess_data[$key]; unset($this->_sess_data[$key]); return $value; } public function clear() { $this->_sess_data = array(); } public function destroy() { $this->_sess_data = array(); } } class cache_session extends Session{ protected function _init() { } protected function _read() { return Cache::instance()->exp($this->_sess_expire)->get($this->_sess_id); } protected function _write() { Cache::instance()->exp($this->_sess_expire)->set($this->_sess_id, $this->_sess_data); } } class file_session extends Session{ private $_sess_path; protected function _init() { if ($this->_sess_path == null) { $this->_sess_path = $this->_get_path(); } } protected function _read() { if (!file_exists($this->_sess_path.$this->_sess_id)) { return array(); } if (filemtime($this->_sess_path.$this->_sess_id) + $this->_sess_expire < time()) { return array(); } $data = file_get_contents($this->_sess_path.$this->_sess_id); return json_decode($data, true); } protected function _write() { return file_put_contents($this->_sess_path.$this->_sess_id, json_encode($this->_sess_data)); } private function _get_path() { $path = TMP_PATH .'sess/'; Fso::instance()->mkdir($path); return $path; } } class memcache_session extends Session{ private $_mc = NULL; protected function _init() { if ( $this->_mc == NULL ) { $this->_mc = new Memcache; list($server, $port) = explode(':', Config::instance()->session['server']); if ( !$this->_mc->pconnect($server, $port) ) { throw new Http503Exceptions('Can\'t connect to session memcache server '); } } } protected function _read() { $data = $this->_mc->get($this->_sess_id); if ( !$data ){ return array(); } return json_decode($data, true); } protected function _write() { return $this->_mc->set($this->_sess_id, json_encode($this->_sess_data), false, $this->_sess_expire); } }
 class String { private static $_instance; public static function instance() { if (self::$_instance == null) { self::$_instance = new self; } return self::$_instance; } function __construct () { } function __destruct () { } public function str2hex($string) { $hexstr = unpack('H*', $string); return array_shift($hexstr); } public function hex2str($hexstr) { $hexstr = str_replace(' ', '', $hexstr); $hexstr = str_replace('\x', '', $hexstr); $retstr = pack('H*', $hexstr); return $retstr; } public function bin2hex($string) { return bin2hex($string); } public function strlen($str, $encoding = 'UTF-8') { return mb_strlen($str, $encoding); } public function substr($str, $len, $start = 0, $end = '...', $encoding = 'UTF-8') { if ( $len >= $this->strlen($str, $encoding) ){ return $str; }else{ return mb_substr($str, $start, $len, $encoding).$end; } } public function stringval($obj) { return strval($obj); } public function tolower($str, $encoding = 'UTF-8') { return mb_strtolower($str, $encoding); } public function toupper($str, $encoding = 'UTF-8') { return mb_strtoupper($str, $encoding); } public function split($str, $split_len = 1) { if (!preg_match('/^[0-9]+$/', $split_len) || $split_len < 1) return FALSE; $len = $this->strlen($str); if ($len <= $split_len) return array($str); preg_match_all('/.{'.$split_len.'}|[^\x00]{1,'.$split_len.'}$/us', $str, $ar); return $ar[0]; } function ord($str) { switch(strlen($str)) { case 1: return ord($str); case 2: $n = (ord($str[0]) & 0x3f) << 6; $n += ord($str[1]) & 0x3f; return $n; case 3: $n = (ord($str[0]) & 0x1f) << 12; $n += (ord($str[1]) & 0x3f) << 6; $n += ord($str[2]) & 0x3f; return $n; case 4: $n = (ord($str[0]) & 0x0f) << 18; $n += (ord($str[1]) & 0x3f) << 12; $n += (ord($str[2]) & 0x3f) << 6; $n += ord($str[3]) & 0x3f; return $n; } } public function radom($len, $type = 'all', $designated = '1234') { switch ($type) { case 'num' : $str = '0123456789'; break; case 'low' : $str = 'abcdefghijklmnopqrstuvwxyz'; break; case 'cap' : $str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'; break; case 'char' : $str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'; break; case 'user' : $str = $designated; break; default : $str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'; break; } $str = str_repeat($str, 5); return substr(str_shuffle($str), 0, $len); } public function gen_id() { return sprintf('%u', crc32(date('Ymd').sprintf('%06d', hexdec(substr(uniqid(),8,13))).sprintf('%01d',rand(0,9)))); } public function str2id($str) { if (empty($str)) { return 0; } return sprintf("%u", crc32($str)); } }
 class Validate { private static $_instance; public $_error = array(); protected static $regex = array( 'null' => '/.+/', 'number' => '/^[-\+]?\d+$/', 'email' => '/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/', 'phone' => '/^((\(\d{2,3}\))|(\d{3}\-))?(\(0\d{2,3}\)|0\d{2,3}-)?[1-9]\d{6,7}(\-\d{1,4})?$/', 'mobile' => '/^(0|86|17951)?(13[0-9]|15[012356789]|18[0236789]|14[57])[0-9]{8}$/', 'idcard' => '/(^\d{15}$)|(^\d{17}[0-9Xx]$)/', 'money' => '/^\d+(\.\d+)?$/', 'zip' => '/^[1-9]\d{5}$/', 'qq' => '/^[1-9]\d{4,12}$/', 'int' => '/^\d+$/', 'english'=> '/^[A-Za-z]+$/', 'chinese'=> '/^[\x{4e00}-\x{9fa5}]+$/u', 'username' => '/^[0-9a-zA-Z]+$/', 'url' => '/^http:\/\/[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&_~`@[\]\':+!]*([^<>\"\"])*$/', 'date' => '/^\d{4}-\d{1,2}-\d{1,2}$/', 'time' => '/^\d{4}-\d{1,2}-\d{1,2}\s\d{1,2}:\d{1,2}:\d{1,2}$/' ); public static function instance() { if (self::$_instance == null) { self::$_instance = new self; } return self::$_instance; } public function __construct() { } public function __set($name, $value){ self::$regex[$name] = $value; } public function __get($name) { if(isset(self::$regex[$name])) { return self::$regex[$name]; }else { return $name; } } public function single($check, $value) { $regex = $this->$check; return preg_match($regex, trim($value)); } public function check($data, $model) { foreach ($data as $name => $value) { if (isset($model[$name])) { if (!preg_match(self::$regex[$model[$name]], $value)) { $this->_error[] = $name; } } } return empty($this->_error) ? TRUE : JS::valid(implode('|', $this->_error)); } }
 function __autoload($class) { static $objects = array(); if (isset($objects[$class])){ return $objects[$class]; } $class_file = ''; foreach (array(LIB_PATH, APP_LIB_PATH) as $path) { $class_file = $path.$class.'.php'; if (file_exists($class_file)) { break; } } if ( empty($class_file)) { throw new HttpExceptions('not fount lib: '.$class); } require( $class_file); $objects[$class] = $class; return TRUE; } function import($class, $subdir = FALSE, $is_dir = FALSE) { static $objects = array(); if (isset($objects[$class])){ return TRUE; } if (class_exists($class, FALSE)){ return TRUE; } if (strstr($class,',')){ $classes = explode( ',', $class ); foreach ( $classes as $v ) { import($v); } } if (is_file($class)){ require($class); $objects[$class] = TRUE; return TRUE; } if (strstr($class,'.')){ $class = str_replace( '.', '/', $class); } $search_dir = array(LIB_PATH, PLU_PATH, MOD_PATH, APP_PATH.'lib/', APP_PATH.'module/'); foreach ($search_dir as $dir) { $ClassName = $dir.$class.'.php'; if ( is_file( $ClassName ) ){ require( $ClassName ); $objects[$class] = TRUE; return TRUE; } } if (strstr(SYS_PATH.$class, '*')){ $array = Fso::fileList(SYS_PATH.str_replace('*', '', $class ), TRUE, '*.php'); foreach ($array as $path) { if (is_file($path)) { import($path); } } } return TRUE; } 